// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  displayName   String?
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Profile settings
  isPublic      Boolean  @default(true)
  bio           String?
  twitchName    String?
  twitchUrl     String?
  discordTag    String?
  tarkovDevId   String?
  avatarUrl     String?
  profileColor  String?  @default("#c7aa6a") // User's profile color for username and statistics
  
  // Account status
  approved      Boolean  @default(false)
  isAdmin       Boolean  @default(false)
  verified      Boolean  @default(false) // Verified streamers/trusted users
  
  // Relations
  progress      UserProgress?
  activities    QuestActivity[]
  overlayTokens OverlayToken[]
  reports       Report[]
  
  @@map("users")
}

model Quest {
  id                String   @id
  name              String
  trader            String
  level             Int
  objectives        String // JSON string of objectives
  prerequisiteQuests String? // JSON array of quest IDs
  autoCompleteQuests String? // JSON array of quest IDs to auto-complete when this quest is completed
  traderLoyalty     Int      @default(1)
  requiredForKappa  Boolean  @default(false)
  wikiLink          String?
  mapName           String?  // Map where quest takes place
  requiredItems     String   @default("[]") // JSON array of required items with counts
  images            String   @default("[]") // JSON array of image URLs
  notes             String?  // Additional notes or tips for the quest
  shoppingList      String   @default("[]") // JSON array of items to buy for Gunsmith quests
  unlockAfterHours  Int      @default(0) // Hours to wait after prerequisites before quest unlocks
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("quests")
}

model UserProgress {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  pmcLevel        Int      @default(1)
  prestige        Int      @default(0)
  completedQuests String   @default("[]") // JSON array of completed quest IDs
  collectorItemsFound String @default("[]") // JSON array of found collector item IDs
  
  // Cached stats for rankings
  completionRate  Float    @default(0)
  totalCompleted  Int      @default(0)
  lastQuestDate   DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("user_progress")
}

model QuestActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questId   String
  questName String
  action    String   // "completed" | "uncompleted"
  timestamp DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
  @@map("quest_activities")
}

model OverlayToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // "collector" | "kappa"
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@map("overlay_tokens")
}

model Report {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // "bug" | "feature" | "quest-error"
  title       String
  description String
  questName   String?  // For quest-error reports
  questId     String?  // For quest-error reports
  status      String   @default("pending") // "pending" | "reviewed" | "resolved" | "closed"
  adminNotes  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([type])
  @@map("reports")
}

model AdminLog {
  id            String   @id @default(cuid())
  adminId       String
  adminUsername String
  action        String   // "approved_user" | "removed_user" | "deleted_user" | "granted_admin" | "revoked_admin" | "added_to_leaderboard" | "removed_from_leaderboard"
  targetUserId  String?
  targetUsername String?
  description   String
  createdAt     DateTime @default(now())
  
  @@index([adminId])
  @@index([createdAt])
  @@map("admin_logs")
}

model AdminChat {
  id        String   @id @default(cuid())
  userId    String
  username  String
  avatarUrl String?
  message   String
  timestamp DateTime @default(now())
  isPinned  Boolean  @default(false)
  
  @@index([timestamp])
  @@index([isPinned])
  @@map("admin_chats")
}

model GlobalChat {
  id           String   @id @default(cuid())
  userId       String
  username     String
  displayName  String?
  avatarUrl    String?
  profileColor String?
  message      String
  timestamp    DateTime @default(now())
  isPinned     Boolean  @default(false)
  
  @@index([timestamp])
  @@index([isPinned])
  @@map("global_chats")
}

model SiteSettings {
  id                String   @id @default(cuid())
  bannerEnabled     Boolean  @default(false)
  bannerMessage     String?
  bannerUpdatedAt   DateTime @updatedAt
  bannerUpdatedBy   String?  // Admin username who last updated
  
  @@map("site_settings")
}
